// schema.prisma
datasource db {
  provider = "postgresql" // можна замінити на "mysql" чи "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String                 @id @default(uuid())
  email          String                 @unique
  firstName      String
  lastName       String
  profilePicture String?
  role           String                 @default("USER")
  passwordHash   String

  // Relations
  chatRoomsCreated ChatRoom[]           @relation("ChatRoomCreator")
  chatRooms        ChatRoomParticipant[]
  messages         Message[]            @relation("UserMessages")
  reactions        MessageReaction[]
  reads            MessageRead[]
}

model ChatRoom {
  id          String                 @id @default(uuid())
  name        String
  type        ChatRoomType
  description String?
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt

  // Relations
  createdById String
  createdBy   User                   @relation("ChatRoomCreator", fields: [createdById], references: [id])
  participants ChatRoomParticipant[]
  messages     Message[]
}

model ChatRoomParticipant {
  id        String   @id @default(uuid())
  chatRoomId String
  userId    String

  chatRoom  ChatRoom @relation(fields: [chatRoomId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([chatRoomId, userId])
}

model Message {
  id            String           @id @default(uuid())
  content       String
  type          MessageType      @default(TEXT)
  attachmentUrl String?
  attachmentName String?
  createdAt     DateTime         @default(now())
  editedAt      DateTime?
  isEdited      Boolean          @default(false)

  // Relations
  chatRoomId String
  senderId   String
  replyToId  String?

  chatRoom   ChatRoom          @relation(fields: [chatRoomId], references: [id])
  sender     User              @relation("UserMessages", fields: [senderId], references: [id])
  replyTo    Message?          @relation("ReplyChain", fields: [replyToId], references: [id])
  replies    Message[]         @relation("ReplyChain")
  reactions  MessageReaction[]
  readBy     MessageRead[]
}

model MessageRead {
  id        String   @id @default(uuid())
  readAt    DateTime @default(now())

  messageId String
  userId    String

  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([messageId, userId])
}

model MessageReaction {
  id        String @id @default(uuid())
  reaction  String

  messageId String
  userId    String

  message   Message @relation(fields: [messageId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([messageId, userId, reaction])
}

enum ChatRoomType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  IMAGE
  VIDEO
  FILE
  AUDIO
}
